
test_pwm.elf:     file format elf32-littlenios2
test_pwm.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00000d04 memsz 0x00000d04 flags r-x
    LOAD off    0x00001d24 vaddr 0x00008d24 paddr 0x00008e14 align 2**12
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
    LOAD off    0x00001f04 vaddr 0x00008f04 paddr 0x00008f04 align 2**12
         filesz 0x00000000 memsz 0x00000014 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  00001e14  2**0
                  CONTENTS
  2 .text         00000cdc  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000028  00008cfc  00008cfc  00001cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f0  00008d24  00008e14  00001d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000014  00008f04  00008f04  00001f04  2**2
                  ALLOC, SMALL_DATA
  6 .RAM          00000000  00008f18  00008f18  00001e14  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001e14  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002e8  00000000  00000000  00001e38  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00003767  00000000  00000000  00002120  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000013ea  00000000  00000000  00005887  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001780  00000000  00000000  00006c71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000003e0  00000000  00000000  000083f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000f94  00000000  00000000  000087d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001388  00000000  00000000  00009768  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0000aaf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000220  00000000  00000000  0000ab30  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000beb6  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0000beb9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000bebc  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000bebd  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0000bebe  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0000bec2  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0000bec6  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0000beca  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0000bed3  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0000bedc  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  0000bee5  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000010  00000000  00000000  0000bef2  2**0
                  CONTENTS, READONLY
 29 .jdi          00004bcc  00000000  00000000  0000bf02  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000441c2  00000000  00000000  00010ace  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
00008cfc l    d  .rodata	00000000 .rodata
00008d24 l    d  .rwdata	00000000 .rwdata
00008f04 l    d  .bss	00000000 .bss
00008f18 l    d  .RAM	00000000 .RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../test_pwm_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
000081a8 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00008d24 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00008b44 g     F .text	0000002c alt_main
00008e14 g       *ABS*	00000000 __flash_rwdata_start
0000815c g     F .text	0000004c printf
00008b70 g     F .text	00000038 alt_putstr
00008cf4 g     F .text	00000008 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
00008f08 g     O .bss	00000004 errno
00008f10 g     O .bss	00000004 alt_argv
00010e04 g       *ABS*	00000000 _gp
00008ba8 g     F .text	00000004 usleep
00008120 g     F .text	0000003c _printf_r
00008980 g     F .text	00000064 .hidden __udivsi3
00008e04 g     O .rwdata	00000004 _global_impure_ptr
00008f18 g       *ABS*	00000000 __bss_end
00008cec g     F .text	00000004 alt_dcache_flush_all
00008e14 g       *ABS*	00000000 __ram_rwdata_end
00008bac g     F .text	00000060 write
00008e0c g     O .rwdata	00000004 JTAG_UART
00008d24 g       *ABS*	00000000 __ram_rodata_end
000089e4 g     F .text	00000058 .hidden __umodsi3
00008f18 g       *ABS*	00000000 end
0000d000 g       *ABS*	00000000 __alt_stack_pointer
00008c30 g     F .text	00000034 altera_avalon_jtag_uart_write
00008214 g     F .text	0000052c ___vfprintf_internal_r
00008020 g     F .text	0000003c _start
00008c2c g     F .text	00000004 alt_sys_init
00008a3c g     F .text	00000028 .hidden __mulsi3
00008d24 g       *ABS*	00000000 __ram_rwdata_start
00008cfc g       *ABS*	00000000 __ram_rodata_start
00008c64 g     F .text	00000088 alt_busy_sleep
00008f18 g       *ABS*	00000000 __alt_stack_base
0000875c g     F .text	000000b8 __sfvwrite_small_dev
00008f04 g       *ABS*	00000000 __bss_start
0000805c g     F .text	000000c4 main
00008000 g       *ABS*	00000000 __alt_mem_RAM
00008f0c g     O .bss	00000004 alt_envp
00008e10 g     O .rwdata	00000004 alt_errno
00008888 g     F .text	00000084 .hidden __divsi3
00008cfc g       *ABS*	00000000 __flash_rodata_start
00008c0c g     F .text	00000020 alt_irq_init
00008830 g     F .text	00000058 _write_r
00008e08 g     O .rwdata	00000004 _impure_ptr
00008f14 g     O .bss	00000004 alt_argc
00008020 g       *ABS*	00000000 __ram_exceptions_start
00008e14 g       *ABS*	00000000 _edata
00008f18 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00008f04 g     O .bss	00000004 a
0000890c g     F .text	00000074 .hidden __modsi3
0000d000 g       *ABS*	00000000 __alt_data_end
0000800c g       .entry	00000000 _exit
00008814 g     F .text	0000001c strlen
00008cf0 g     F .text	00000004 alt_icache_flush_all
00008740 g     F .text	0000001c __vfprintf_internal
00008a64 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6838114 	ori	gp,gp,3588
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a3c114 	ori	r2,r2,36612

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e3c614 	ori	r3,r3,36632

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff7240>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	0008a640 	call	8a64 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	0008b440 	call	8b44 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff7254>

0000805c <main>:


unsigned int a;

int main()
{
    805c:	defffe04 	addi	sp,sp,-8
    8060:	dc000015 	stw	r16,0(sp)
    8064:	dfc00115 	stw	ra,4(sp)

	*freq = 0x0400; // divise clk par 1024
    8068:	00c10004 	movi	r3,1024
    806c:	0005883a 	mov	r2,zero
    8070:	10c00015 	stw	r3,0(r2)
	*duty = 0x0200; // RC = 50
    8074:	00c08004 	movi	r3,512
    8078:	00800104 	movi	r2,4
    807c:	10c00015 	stw	r3,0(r2)
	*control = 0x0003;
  alt_putstr("Salut ext!\n");		// test si communication OK
    8080:	01000074 	movhi	r4,1
int main()
{

	*freq = 0x0400; // divise clk par 1024
	*duty = 0x0200; // RC = 50
	*control = 0x0003;
    8084:	00c000c4 	movi	r3,3
    8088:	00800204 	movi	r2,8
    808c:	10c00015 	stw	r3,0(r2)
  alt_putstr("Salut ext!\n");		// test si communication OK
    8090:	21233f04 	addi	r4,r4,-29444

  while (1)
  	  {
	  alt_putstr("Salut int!\n");	// test si communication OK
	  //*leds = *boutons;
	  a = *boutons & 3;
    8094:	04000074 	movhi	r16,1
{

	*freq = 0x0400; // divise clk par 1024
	*duty = 0x0200; // RC = 50
	*control = 0x0003;
  alt_putstr("Salut ext!\n");		// test si communication OK
    8098:	0008b700 	call	8b70 <alt_putstr>

  while (1)
  	  {
	  alt_putstr("Salut int!\n");	// test si communication OK
	  //*leds = *boutons;
	  a = *boutons & 3;
    809c:	84040804 	addi	r16,r16,4128
	*control = 0x0003;
  alt_putstr("Salut ext!\n");		// test si communication OK

  while (1)
  	  {
	  alt_putstr("Salut int!\n");	// test si communication OK
    80a0:	01000074 	movhi	r4,1
    80a4:	21234204 	addi	r4,r4,-29432
    80a8:	0008b700 	call	8b70 <alt_putstr>
	  //*leds = *boutons;
	  a = *boutons & 3;
    80ac:	81400003 	ldbu	r5,0(r16)
	  printf("boutons = %d \n", a);
    80b0:	01000074 	movhi	r4,1
    80b4:	21234504 	addi	r4,r4,-29420

  while (1)
  	  {
	  alt_putstr("Salut int!\n");	// test si communication OK
	  //*leds = *boutons;
	  a = *boutons & 3;
    80b8:	294000cc 	andi	r5,r5,3
    80bc:	d1604015 	stw	r5,-32512(gp)
	  printf("boutons = %d \n", a);
    80c0:	000815c0 	call	815c <printf>
	  usleep(1000000);
    80c4:	010003f4 	movhi	r4,15
    80c8:	21109004 	addi	r4,r4,16960
    80cc:	0008ba80 	call	8ba8 <usleep>
	  switch(a)
    80d0:	d0a04017 	ldw	r2,-32512(gp)
    80d4:	00c00044 	movi	r3,1
    80d8:	10c00b26 	beq	r2,r3,8108 <main+0xac>
    80dc:	10000a26 	beq	r2,zero,8108 <main+0xac>
    80e0:	00c00084 	movi	r3,2
    80e4:	10ffee26 	beq	r2,r3,80a0 <_gp+0xffff729c>
    80e8:	00c00074 	movhi	r3,1
    80ec:	010000c4 	movi	r4,3
    80f0:	18c40c04 	addi	r3,r3,4144
    80f4:	1100081e 	bne	r2,r4,8118 <main+0xbc>
	  	  	  {
	  	  	  	  case 0 : *leds=0; break;
	  	  	  	  case 1 : *leds=0; break;
	  	  	  	  case 2 : break;
	  	  	  	  case 3 : *leds=*leds + 1; break;
    80f8:	18800017 	ldw	r2,0(r3)
    80fc:	10800044 	addi	r2,r2,1
    8100:	18800015 	stw	r2,0(r3)
    8104:	003fe606 	br	80a0 <_gp+0xffff729c>
	  printf("boutons = %d \n", a);
	  usleep(1000000);
	  switch(a)
	  	  	  {
	  	  	  	  case 0 : *leds=0; break;
	  	  	  	  case 1 : *leds=0; break;
    8108:	00800074 	movhi	r2,1
    810c:	10840c04 	addi	r2,r2,4144
    8110:	10000015 	stw	zero,0(r2)
    8114:	003fe206 	br	80a0 <_gp+0xffff729c>
	  	  	  	  case 2 : break;
	  	  	  	  case 3 : *leds=*leds + 1; break;
	  	  	  	  default : *leds = 0; break;
    8118:	18000015 	stw	zero,0(r3)
    811c:	003fe006 	br	80a0 <_gp+0xffff729c>

00008120 <_printf_r>:
    8120:	defffd04 	addi	sp,sp,-12
    8124:	dfc00015 	stw	ra,0(sp)
    8128:	d9800115 	stw	r6,4(sp)
    812c:	d9c00215 	stw	r7,8(sp)
    8130:	20c00217 	ldw	r3,8(r4)
    8134:	01800074 	movhi	r6,1
    8138:	31a1d704 	addi	r6,r6,-30884
    813c:	19800115 	stw	r6,4(r3)
    8140:	280d883a 	mov	r6,r5
    8144:	21400217 	ldw	r5,8(r4)
    8148:	d9c00104 	addi	r7,sp,4
    814c:	00082140 	call	8214 <___vfprintf_internal_r>
    8150:	dfc00017 	ldw	ra,0(sp)
    8154:	dec00304 	addi	sp,sp,12
    8158:	f800283a 	ret

0000815c <printf>:
    815c:	defffc04 	addi	sp,sp,-16
    8160:	dfc00015 	stw	ra,0(sp)
    8164:	d9400115 	stw	r5,4(sp)
    8168:	d9800215 	stw	r6,8(sp)
    816c:	d9c00315 	stw	r7,12(sp)
    8170:	00800074 	movhi	r2,1
    8174:	10a38204 	addi	r2,r2,-29176
    8178:	10800017 	ldw	r2,0(r2)
    817c:	01400074 	movhi	r5,1
    8180:	2961d704 	addi	r5,r5,-30884
    8184:	10c00217 	ldw	r3,8(r2)
    8188:	d9800104 	addi	r6,sp,4
    818c:	19400115 	stw	r5,4(r3)
    8190:	200b883a 	mov	r5,r4
    8194:	11000217 	ldw	r4,8(r2)
    8198:	00087400 	call	8740 <__vfprintf_internal>
    819c:	dfc00017 	ldw	ra,0(sp)
    81a0:	dec00404 	addi	sp,sp,16
    81a4:	f800283a 	ret

000081a8 <print_repeat>:
    81a8:	defffb04 	addi	sp,sp,-20
    81ac:	dc800315 	stw	r18,12(sp)
    81b0:	dc400215 	stw	r17,8(sp)
    81b4:	dc000115 	stw	r16,4(sp)
    81b8:	dfc00415 	stw	ra,16(sp)
    81bc:	2025883a 	mov	r18,r4
    81c0:	2823883a 	mov	r17,r5
    81c4:	d9800005 	stb	r6,0(sp)
    81c8:	3821883a 	mov	r16,r7
    81cc:	04000a0e 	bge	zero,r16,81f8 <print_repeat+0x50>
    81d0:	88800117 	ldw	r2,4(r17)
    81d4:	01c00044 	movi	r7,1
    81d8:	d80d883a 	mov	r6,sp
    81dc:	880b883a 	mov	r5,r17
    81e0:	9009883a 	mov	r4,r18
    81e4:	103ee83a 	callr	r2
    81e8:	843fffc4 	addi	r16,r16,-1
    81ec:	103ff726 	beq	r2,zero,81cc <_gp+0xffff73c8>
    81f0:	00bfffc4 	movi	r2,-1
    81f4:	00000106 	br	81fc <print_repeat+0x54>
    81f8:	0005883a 	mov	r2,zero
    81fc:	dfc00417 	ldw	ra,16(sp)
    8200:	dc800317 	ldw	r18,12(sp)
    8204:	dc400217 	ldw	r17,8(sp)
    8208:	dc000117 	ldw	r16,4(sp)
    820c:	dec00504 	addi	sp,sp,20
    8210:	f800283a 	ret

00008214 <___vfprintf_internal_r>:
    8214:	deffe504 	addi	sp,sp,-108
    8218:	d8c00804 	addi	r3,sp,32
    821c:	ddc01815 	stw	r23,96(sp)
    8220:	dd801715 	stw	r22,92(sp)
    8224:	dd401615 	stw	r21,88(sp)
    8228:	dd001515 	stw	r20,84(sp)
    822c:	dcc01415 	stw	r19,80(sp)
    8230:	dc801315 	stw	r18,76(sp)
    8234:	dc401215 	stw	r17,72(sp)
    8238:	dc001115 	stw	r16,68(sp)
    823c:	dfc01a15 	stw	ra,104(sp)
    8240:	df001915 	stw	fp,100(sp)
    8244:	2029883a 	mov	r20,r4
    8248:	2823883a 	mov	r17,r5
    824c:	382d883a 	mov	r22,r7
    8250:	d9800f15 	stw	r6,60(sp)
    8254:	0021883a 	mov	r16,zero
    8258:	d8000e15 	stw	zero,56(sp)
    825c:	d8000a15 	stw	zero,40(sp)
    8260:	002b883a 	mov	r21,zero
    8264:	0027883a 	mov	r19,zero
    8268:	0025883a 	mov	r18,zero
    826c:	d8000c15 	stw	zero,48(sp)
    8270:	d8000b15 	stw	zero,44(sp)
    8274:	002f883a 	mov	r23,zero
    8278:	d8c00915 	stw	r3,36(sp)
    827c:	d8c00f17 	ldw	r3,60(sp)
    8280:	19000003 	ldbu	r4,0(r3)
    8284:	20803fcc 	andi	r2,r4,255
    8288:	1080201c 	xori	r2,r2,128
    828c:	10bfe004 	addi	r2,r2,-128
    8290:	10011e26 	beq	r2,zero,870c <___vfprintf_internal_r+0x4f8>
    8294:	00c00044 	movi	r3,1
    8298:	b8c01426 	beq	r23,r3,82ec <___vfprintf_internal_r+0xd8>
    829c:	1dc00216 	blt	r3,r23,82a8 <___vfprintf_internal_r+0x94>
    82a0:	b8000626 	beq	r23,zero,82bc <___vfprintf_internal_r+0xa8>
    82a4:	00011506 	br	86fc <___vfprintf_internal_r+0x4e8>
    82a8:	01400084 	movi	r5,2
    82ac:	b9401d26 	beq	r23,r5,8324 <___vfprintf_internal_r+0x110>
    82b0:	014000c4 	movi	r5,3
    82b4:	b9402b26 	beq	r23,r5,8364 <___vfprintf_internal_r+0x150>
    82b8:	00011006 	br	86fc <___vfprintf_internal_r+0x4e8>
    82bc:	01400944 	movi	r5,37
    82c0:	1140fc26 	beq	r2,r5,86b4 <___vfprintf_internal_r+0x4a0>
    82c4:	88800117 	ldw	r2,4(r17)
    82c8:	d9000005 	stb	r4,0(sp)
    82cc:	01c00044 	movi	r7,1
    82d0:	d80d883a 	mov	r6,sp
    82d4:	880b883a 	mov	r5,r17
    82d8:	a009883a 	mov	r4,r20
    82dc:	103ee83a 	callr	r2
    82e0:	1000d81e 	bne	r2,zero,8644 <___vfprintf_internal_r+0x430>
    82e4:	84000044 	addi	r16,r16,1
    82e8:	00010406 	br	86fc <___vfprintf_internal_r+0x4e8>
    82ec:	01400c04 	movi	r5,48
    82f0:	1140fa26 	beq	r2,r5,86dc <___vfprintf_internal_r+0x4c8>
    82f4:	01400944 	movi	r5,37
    82f8:	11400a1e 	bne	r2,r5,8324 <___vfprintf_internal_r+0x110>
    82fc:	d8800005 	stb	r2,0(sp)
    8300:	88800117 	ldw	r2,4(r17)
    8304:	b80f883a 	mov	r7,r23
    8308:	d80d883a 	mov	r6,sp
    830c:	880b883a 	mov	r5,r17
    8310:	a009883a 	mov	r4,r20
    8314:	103ee83a 	callr	r2
    8318:	1000ca1e 	bne	r2,zero,8644 <___vfprintf_internal_r+0x430>
    831c:	84000044 	addi	r16,r16,1
    8320:	0000f506 	br	86f8 <___vfprintf_internal_r+0x4e4>
    8324:	25fff404 	addi	r23,r4,-48
    8328:	bdc03fcc 	andi	r23,r23,255
    832c:	00c00244 	movi	r3,9
    8330:	1dc00936 	bltu	r3,r23,8358 <___vfprintf_internal_r+0x144>
    8334:	00bfffc4 	movi	r2,-1
    8338:	90800426 	beq	r18,r2,834c <___vfprintf_internal_r+0x138>
    833c:	01400284 	movi	r5,10
    8340:	9009883a 	mov	r4,r18
    8344:	0008a3c0 	call	8a3c <__mulsi3>
    8348:	00000106 	br	8350 <___vfprintf_internal_r+0x13c>
    834c:	0005883a 	mov	r2,zero
    8350:	b8a5883a 	add	r18,r23,r2
    8354:	0000e206 	br	86e0 <___vfprintf_internal_r+0x4cc>
    8358:	01400b84 	movi	r5,46
    835c:	1140e426 	beq	r2,r5,86f0 <___vfprintf_internal_r+0x4dc>
    8360:	05c00084 	movi	r23,2
    8364:	213ff404 	addi	r4,r4,-48
    8368:	27003fcc 	andi	fp,r4,255
    836c:	00c00244 	movi	r3,9
    8370:	1f000936 	bltu	r3,fp,8398 <___vfprintf_internal_r+0x184>
    8374:	00bfffc4 	movi	r2,-1
    8378:	98800426 	beq	r19,r2,838c <___vfprintf_internal_r+0x178>
    837c:	01400284 	movi	r5,10
    8380:	9809883a 	mov	r4,r19
    8384:	0008a3c0 	call	8a3c <__mulsi3>
    8388:	00000106 	br	8390 <___vfprintf_internal_r+0x17c>
    838c:	0005883a 	mov	r2,zero
    8390:	e0a7883a 	add	r19,fp,r2
    8394:	0000d906 	br	86fc <___vfprintf_internal_r+0x4e8>
    8398:	00c01b04 	movi	r3,108
    839c:	10c0d226 	beq	r2,r3,86e8 <___vfprintf_internal_r+0x4d4>
    83a0:	013fffc4 	movi	r4,-1
    83a4:	99000226 	beq	r19,r4,83b0 <___vfprintf_internal_r+0x19c>
    83a8:	d8000b15 	stw	zero,44(sp)
    83ac:	00000106 	br	83b4 <___vfprintf_internal_r+0x1a0>
    83b0:	04c00044 	movi	r19,1
    83b4:	01001a44 	movi	r4,105
    83b8:	11001626 	beq	r2,r4,8414 <___vfprintf_internal_r+0x200>
    83bc:	20800916 	blt	r4,r2,83e4 <___vfprintf_internal_r+0x1d0>
    83c0:	010018c4 	movi	r4,99
    83c4:	11008826 	beq	r2,r4,85e8 <___vfprintf_internal_r+0x3d4>
    83c8:	01001904 	movi	r4,100
    83cc:	11001126 	beq	r2,r4,8414 <___vfprintf_internal_r+0x200>
    83d0:	01001604 	movi	r4,88
    83d4:	1100c81e 	bne	r2,r4,86f8 <___vfprintf_internal_r+0x4e4>
    83d8:	00c00044 	movi	r3,1
    83dc:	d8c00e15 	stw	r3,56(sp)
    83e0:	00001506 	br	8438 <___vfprintf_internal_r+0x224>
    83e4:	01001cc4 	movi	r4,115
    83e8:	11009826 	beq	r2,r4,864c <___vfprintf_internal_r+0x438>
    83ec:	20800416 	blt	r4,r2,8400 <___vfprintf_internal_r+0x1ec>
    83f0:	01001bc4 	movi	r4,111
    83f4:	1100c01e 	bne	r2,r4,86f8 <___vfprintf_internal_r+0x4e4>
    83f8:	05400204 	movi	r21,8
    83fc:	00000f06 	br	843c <___vfprintf_internal_r+0x228>
    8400:	01001d44 	movi	r4,117
    8404:	11000d26 	beq	r2,r4,843c <___vfprintf_internal_r+0x228>
    8408:	01001e04 	movi	r4,120
    840c:	11000a26 	beq	r2,r4,8438 <___vfprintf_internal_r+0x224>
    8410:	0000b906 	br	86f8 <___vfprintf_internal_r+0x4e4>
    8414:	d8c00a17 	ldw	r3,40(sp)
    8418:	b7000104 	addi	fp,r22,4
    841c:	18000726 	beq	r3,zero,843c <___vfprintf_internal_r+0x228>
    8420:	df000d15 	stw	fp,52(sp)
    8424:	b5c00017 	ldw	r23,0(r22)
    8428:	b800080e 	bge	r23,zero,844c <___vfprintf_internal_r+0x238>
    842c:	05efc83a 	sub	r23,zero,r23
    8430:	02400044 	movi	r9,1
    8434:	00000606 	br	8450 <___vfprintf_internal_r+0x23c>
    8438:	05400404 	movi	r21,16
    843c:	b0c00104 	addi	r3,r22,4
    8440:	d8c00d15 	stw	r3,52(sp)
    8444:	b5c00017 	ldw	r23,0(r22)
    8448:	d8000a15 	stw	zero,40(sp)
    844c:	0013883a 	mov	r9,zero
    8450:	d839883a 	mov	fp,sp
    8454:	b8001726 	beq	r23,zero,84b4 <___vfprintf_internal_r+0x2a0>
    8458:	a80b883a 	mov	r5,r21
    845c:	b809883a 	mov	r4,r23
    8460:	da401015 	stw	r9,64(sp)
    8464:	00089800 	call	8980 <__udivsi3>
    8468:	a80b883a 	mov	r5,r21
    846c:	1009883a 	mov	r4,r2
    8470:	102d883a 	mov	r22,r2
    8474:	0008a3c0 	call	8a3c <__mulsi3>
    8478:	b885c83a 	sub	r2,r23,r2
    847c:	00c00244 	movi	r3,9
    8480:	da401017 	ldw	r9,64(sp)
    8484:	18800216 	blt	r3,r2,8490 <___vfprintf_internal_r+0x27c>
    8488:	10800c04 	addi	r2,r2,48
    848c:	00000506 	br	84a4 <___vfprintf_internal_r+0x290>
    8490:	d8c00e17 	ldw	r3,56(sp)
    8494:	18000226 	beq	r3,zero,84a0 <___vfprintf_internal_r+0x28c>
    8498:	10800dc4 	addi	r2,r2,55
    849c:	00000106 	br	84a4 <___vfprintf_internal_r+0x290>
    84a0:	108015c4 	addi	r2,r2,87
    84a4:	e0800005 	stb	r2,0(fp)
    84a8:	b02f883a 	mov	r23,r22
    84ac:	e7000044 	addi	fp,fp,1
    84b0:	003fe806 	br	8454 <_gp+0xffff7650>
    84b4:	e6efc83a 	sub	r23,fp,sp
    84b8:	9dc5c83a 	sub	r2,r19,r23
    84bc:	0080090e 	bge	zero,r2,84e4 <___vfprintf_internal_r+0x2d0>
    84c0:	e085883a 	add	r2,fp,r2
    84c4:	01400c04 	movi	r5,48
    84c8:	d8c00917 	ldw	r3,36(sp)
    84cc:	e009883a 	mov	r4,fp
    84d0:	e0c0032e 	bgeu	fp,r3,84e0 <___vfprintf_internal_r+0x2cc>
    84d4:	e7000044 	addi	fp,fp,1
    84d8:	21400005 	stb	r5,0(r4)
    84dc:	e0bffa1e 	bne	fp,r2,84c8 <_gp+0xffff76c4>
    84e0:	e6efc83a 	sub	r23,fp,sp
    84e4:	d8c00b17 	ldw	r3,44(sp)
    84e8:	4dd1883a 	add	r8,r9,r23
    84ec:	922dc83a 	sub	r22,r18,r8
    84f0:	18001626 	beq	r3,zero,854c <___vfprintf_internal_r+0x338>
    84f4:	48000a26 	beq	r9,zero,8520 <___vfprintf_internal_r+0x30c>
    84f8:	00800b44 	movi	r2,45
    84fc:	d8800805 	stb	r2,32(sp)
    8500:	88800117 	ldw	r2,4(r17)
    8504:	01c00044 	movi	r7,1
    8508:	d9800804 	addi	r6,sp,32
    850c:	880b883a 	mov	r5,r17
    8510:	a009883a 	mov	r4,r20
    8514:	103ee83a 	callr	r2
    8518:	10004a1e 	bne	r2,zero,8644 <___vfprintf_internal_r+0x430>
    851c:	84000044 	addi	r16,r16,1
    8520:	0580070e 	bge	zero,r22,8540 <___vfprintf_internal_r+0x32c>
    8524:	b00f883a 	mov	r7,r22
    8528:	01800c04 	movi	r6,48
    852c:	880b883a 	mov	r5,r17
    8530:	a009883a 	mov	r4,r20
    8534:	00081a80 	call	81a8 <print_repeat>
    8538:	1000421e 	bne	r2,zero,8644 <___vfprintf_internal_r+0x430>
    853c:	85a1883a 	add	r16,r16,r22
    8540:	e02d883a 	mov	r22,fp
    8544:	bf2fc83a 	sub	r23,r23,fp
    8548:	00002006 	br	85cc <___vfprintf_internal_r+0x3b8>
    854c:	0580090e 	bge	zero,r22,8574 <___vfprintf_internal_r+0x360>
    8550:	b00f883a 	mov	r7,r22
    8554:	01800804 	movi	r6,32
    8558:	880b883a 	mov	r5,r17
    855c:	a009883a 	mov	r4,r20
    8560:	da401015 	stw	r9,64(sp)
    8564:	00081a80 	call	81a8 <print_repeat>
    8568:	da401017 	ldw	r9,64(sp)
    856c:	1000351e 	bne	r2,zero,8644 <___vfprintf_internal_r+0x430>
    8570:	85a1883a 	add	r16,r16,r22
    8574:	483ff226 	beq	r9,zero,8540 <_gp+0xffff773c>
    8578:	00800b44 	movi	r2,45
    857c:	d8800805 	stb	r2,32(sp)
    8580:	88800117 	ldw	r2,4(r17)
    8584:	01c00044 	movi	r7,1
    8588:	d9800804 	addi	r6,sp,32
    858c:	880b883a 	mov	r5,r17
    8590:	a009883a 	mov	r4,r20
    8594:	103ee83a 	callr	r2
    8598:	10002a1e 	bne	r2,zero,8644 <___vfprintf_internal_r+0x430>
    859c:	84000044 	addi	r16,r16,1
    85a0:	003fe706 	br	8540 <_gp+0xffff773c>
    85a4:	b5bfffc4 	addi	r22,r22,-1
    85a8:	b0800003 	ldbu	r2,0(r22)
    85ac:	01c00044 	movi	r7,1
    85b0:	d9800804 	addi	r6,sp,32
    85b4:	d8800805 	stb	r2,32(sp)
    85b8:	88800117 	ldw	r2,4(r17)
    85bc:	880b883a 	mov	r5,r17
    85c0:	a009883a 	mov	r4,r20
    85c4:	103ee83a 	callr	r2
    85c8:	10001e1e 	bne	r2,zero,8644 <___vfprintf_internal_r+0x430>
    85cc:	8585c83a 	sub	r2,r16,r22
    85d0:	b5c9883a 	add	r4,r22,r23
    85d4:	e085883a 	add	r2,fp,r2
    85d8:	013ff216 	blt	zero,r4,85a4 <_gp+0xffff77a0>
    85dc:	1021883a 	mov	r16,r2
    85e0:	dd800d17 	ldw	r22,52(sp)
    85e4:	00004406 	br	86f8 <___vfprintf_internal_r+0x4e4>
    85e8:	00800044 	movi	r2,1
    85ec:	1480080e 	bge	r2,r18,8610 <___vfprintf_internal_r+0x3fc>
    85f0:	95ffffc4 	addi	r23,r18,-1
    85f4:	b80f883a 	mov	r7,r23
    85f8:	01800804 	movi	r6,32
    85fc:	880b883a 	mov	r5,r17
    8600:	a009883a 	mov	r4,r20
    8604:	00081a80 	call	81a8 <print_repeat>
    8608:	10000e1e 	bne	r2,zero,8644 <___vfprintf_internal_r+0x430>
    860c:	85e1883a 	add	r16,r16,r23
    8610:	b0800017 	ldw	r2,0(r22)
    8614:	01c00044 	movi	r7,1
    8618:	d80d883a 	mov	r6,sp
    861c:	d8800005 	stb	r2,0(sp)
    8620:	88800117 	ldw	r2,4(r17)
    8624:	880b883a 	mov	r5,r17
    8628:	a009883a 	mov	r4,r20
    862c:	b5c00104 	addi	r23,r22,4
    8630:	103ee83a 	callr	r2
    8634:	1000031e 	bne	r2,zero,8644 <___vfprintf_internal_r+0x430>
    8638:	84000044 	addi	r16,r16,1
    863c:	b82d883a 	mov	r22,r23
    8640:	00002d06 	br	86f8 <___vfprintf_internal_r+0x4e4>
    8644:	00bfffc4 	movi	r2,-1
    8648:	00003106 	br	8710 <___vfprintf_internal_r+0x4fc>
    864c:	b5c00017 	ldw	r23,0(r22)
    8650:	b7000104 	addi	fp,r22,4
    8654:	b809883a 	mov	r4,r23
    8658:	00088140 	call	8814 <strlen>
    865c:	9091c83a 	sub	r8,r18,r2
    8660:	102d883a 	mov	r22,r2
    8664:	0200090e 	bge	zero,r8,868c <___vfprintf_internal_r+0x478>
    8668:	400f883a 	mov	r7,r8
    866c:	01800804 	movi	r6,32
    8670:	880b883a 	mov	r5,r17
    8674:	a009883a 	mov	r4,r20
    8678:	da001015 	stw	r8,64(sp)
    867c:	00081a80 	call	81a8 <print_repeat>
    8680:	da001017 	ldw	r8,64(sp)
    8684:	103fef1e 	bne	r2,zero,8644 <_gp+0xffff7840>
    8688:	8221883a 	add	r16,r16,r8
    868c:	88800117 	ldw	r2,4(r17)
    8690:	b00f883a 	mov	r7,r22
    8694:	b80d883a 	mov	r6,r23
    8698:	880b883a 	mov	r5,r17
    869c:	a009883a 	mov	r4,r20
    86a0:	103ee83a 	callr	r2
    86a4:	103fe71e 	bne	r2,zero,8644 <_gp+0xffff7840>
    86a8:	85a1883a 	add	r16,r16,r22
    86ac:	e02d883a 	mov	r22,fp
    86b0:	00001106 	br	86f8 <___vfprintf_internal_r+0x4e4>
    86b4:	00c00044 	movi	r3,1
    86b8:	04ffffc4 	movi	r19,-1
    86bc:	d8000e15 	stw	zero,56(sp)
    86c0:	d8c00a15 	stw	r3,40(sp)
    86c4:	05400284 	movi	r21,10
    86c8:	9825883a 	mov	r18,r19
    86cc:	d8000c15 	stw	zero,48(sp)
    86d0:	d8000b15 	stw	zero,44(sp)
    86d4:	182f883a 	mov	r23,r3
    86d8:	00000806 	br	86fc <___vfprintf_internal_r+0x4e8>
    86dc:	ddc00b15 	stw	r23,44(sp)
    86e0:	05c00084 	movi	r23,2
    86e4:	00000506 	br	86fc <___vfprintf_internal_r+0x4e8>
    86e8:	00c00044 	movi	r3,1
    86ec:	d8c00c15 	stw	r3,48(sp)
    86f0:	05c000c4 	movi	r23,3
    86f4:	00000106 	br	86fc <___vfprintf_internal_r+0x4e8>
    86f8:	002f883a 	mov	r23,zero
    86fc:	d8c00f17 	ldw	r3,60(sp)
    8700:	18c00044 	addi	r3,r3,1
    8704:	d8c00f15 	stw	r3,60(sp)
    8708:	003edc06 	br	827c <_gp+0xffff7478>
    870c:	8005883a 	mov	r2,r16
    8710:	dfc01a17 	ldw	ra,104(sp)
    8714:	df001917 	ldw	fp,100(sp)
    8718:	ddc01817 	ldw	r23,96(sp)
    871c:	dd801717 	ldw	r22,92(sp)
    8720:	dd401617 	ldw	r21,88(sp)
    8724:	dd001517 	ldw	r20,84(sp)
    8728:	dcc01417 	ldw	r19,80(sp)
    872c:	dc801317 	ldw	r18,76(sp)
    8730:	dc401217 	ldw	r17,72(sp)
    8734:	dc001117 	ldw	r16,68(sp)
    8738:	dec01b04 	addi	sp,sp,108
    873c:	f800283a 	ret

00008740 <__vfprintf_internal>:
    8740:	00800074 	movhi	r2,1
    8744:	10a38204 	addi	r2,r2,-29176
    8748:	300f883a 	mov	r7,r6
    874c:	280d883a 	mov	r6,r5
    8750:	200b883a 	mov	r5,r4
    8754:	11000017 	ldw	r4,0(r2)
    8758:	00082141 	jmpi	8214 <___vfprintf_internal_r>

0000875c <__sfvwrite_small_dev>:
    875c:	2880000b 	ldhu	r2,0(r5)
    8760:	1080020c 	andi	r2,r2,8
    8764:	10002126 	beq	r2,zero,87ec <__sfvwrite_small_dev+0x90>
    8768:	2880008f 	ldh	r2,2(r5)
    876c:	defffa04 	addi	sp,sp,-24
    8770:	dc000015 	stw	r16,0(sp)
    8774:	dfc00515 	stw	ra,20(sp)
    8778:	dd000415 	stw	r20,16(sp)
    877c:	dcc00315 	stw	r19,12(sp)
    8780:	dc800215 	stw	r18,8(sp)
    8784:	dc400115 	stw	r17,4(sp)
    8788:	2821883a 	mov	r16,r5
    878c:	10001216 	blt	r2,zero,87d8 <__sfvwrite_small_dev+0x7c>
    8790:	2027883a 	mov	r19,r4
    8794:	3025883a 	mov	r18,r6
    8798:	3823883a 	mov	r17,r7
    879c:	05010004 	movi	r20,1024
    87a0:	04400b0e 	bge	zero,r17,87d0 <__sfvwrite_small_dev+0x74>
    87a4:	880f883a 	mov	r7,r17
    87a8:	a440010e 	bge	r20,r17,87b0 <__sfvwrite_small_dev+0x54>
    87ac:	01c10004 	movi	r7,1024
    87b0:	8140008f 	ldh	r5,2(r16)
    87b4:	900d883a 	mov	r6,r18
    87b8:	9809883a 	mov	r4,r19
    87bc:	00088300 	call	8830 <_write_r>
    87c0:	0080050e 	bge	zero,r2,87d8 <__sfvwrite_small_dev+0x7c>
    87c4:	88a3c83a 	sub	r17,r17,r2
    87c8:	90a5883a 	add	r18,r18,r2
    87cc:	003ff406 	br	87a0 <_gp+0xffff799c>
    87d0:	0005883a 	mov	r2,zero
    87d4:	00000706 	br	87f4 <__sfvwrite_small_dev+0x98>
    87d8:	8080000b 	ldhu	r2,0(r16)
    87dc:	10801014 	ori	r2,r2,64
    87e0:	8080000d 	sth	r2,0(r16)
    87e4:	00bfffc4 	movi	r2,-1
    87e8:	00000206 	br	87f4 <__sfvwrite_small_dev+0x98>
    87ec:	00bfffc4 	movi	r2,-1
    87f0:	f800283a 	ret
    87f4:	dfc00517 	ldw	ra,20(sp)
    87f8:	dd000417 	ldw	r20,16(sp)
    87fc:	dcc00317 	ldw	r19,12(sp)
    8800:	dc800217 	ldw	r18,8(sp)
    8804:	dc400117 	ldw	r17,4(sp)
    8808:	dc000017 	ldw	r16,0(sp)
    880c:	dec00604 	addi	sp,sp,24
    8810:	f800283a 	ret

00008814 <strlen>:
    8814:	2005883a 	mov	r2,r4
    8818:	10c00007 	ldb	r3,0(r2)
    881c:	18000226 	beq	r3,zero,8828 <strlen+0x14>
    8820:	10800044 	addi	r2,r2,1
    8824:	003ffc06 	br	8818 <_gp+0xffff7a14>
    8828:	1105c83a 	sub	r2,r2,r4
    882c:	f800283a 	ret

00008830 <_write_r>:
    8830:	defffd04 	addi	sp,sp,-12
    8834:	dc000015 	stw	r16,0(sp)
    8838:	04000074 	movhi	r16,1
    883c:	dc400115 	stw	r17,4(sp)
    8840:	8423c204 	addi	r16,r16,-28920
    8844:	2023883a 	mov	r17,r4
    8848:	2809883a 	mov	r4,r5
    884c:	300b883a 	mov	r5,r6
    8850:	380d883a 	mov	r6,r7
    8854:	dfc00215 	stw	ra,8(sp)
    8858:	80000015 	stw	zero,0(r16)
    885c:	0008bac0 	call	8bac <write>
    8860:	00ffffc4 	movi	r3,-1
    8864:	10c0031e 	bne	r2,r3,8874 <_write_r+0x44>
    8868:	80c00017 	ldw	r3,0(r16)
    886c:	18000126 	beq	r3,zero,8874 <_write_r+0x44>
    8870:	88c00015 	stw	r3,0(r17)
    8874:	dfc00217 	ldw	ra,8(sp)
    8878:	dc400117 	ldw	r17,4(sp)
    887c:	dc000017 	ldw	r16,0(sp)
    8880:	dec00304 	addi	sp,sp,12
    8884:	f800283a 	ret

00008888 <__divsi3>:
    8888:	20001b16 	blt	r4,zero,88f8 <__divsi3+0x70>
    888c:	000f883a 	mov	r7,zero
    8890:	28001616 	blt	r5,zero,88ec <__divsi3+0x64>
    8894:	200d883a 	mov	r6,r4
    8898:	29001a2e 	bgeu	r5,r4,8904 <__divsi3+0x7c>
    889c:	00800804 	movi	r2,32
    88a0:	00c00044 	movi	r3,1
    88a4:	00000106 	br	88ac <__divsi3+0x24>
    88a8:	10000d26 	beq	r2,zero,88e0 <__divsi3+0x58>
    88ac:	294b883a 	add	r5,r5,r5
    88b0:	10bfffc4 	addi	r2,r2,-1
    88b4:	18c7883a 	add	r3,r3,r3
    88b8:	293ffb36 	bltu	r5,r4,88a8 <_gp+0xffff7aa4>
    88bc:	0005883a 	mov	r2,zero
    88c0:	18000726 	beq	r3,zero,88e0 <__divsi3+0x58>
    88c4:	0005883a 	mov	r2,zero
    88c8:	31400236 	bltu	r6,r5,88d4 <__divsi3+0x4c>
    88cc:	314dc83a 	sub	r6,r6,r5
    88d0:	10c4b03a 	or	r2,r2,r3
    88d4:	1806d07a 	srli	r3,r3,1
    88d8:	280ad07a 	srli	r5,r5,1
    88dc:	183ffa1e 	bne	r3,zero,88c8 <_gp+0xffff7ac4>
    88e0:	38000126 	beq	r7,zero,88e8 <__divsi3+0x60>
    88e4:	0085c83a 	sub	r2,zero,r2
    88e8:	f800283a 	ret
    88ec:	014bc83a 	sub	r5,zero,r5
    88f0:	39c0005c 	xori	r7,r7,1
    88f4:	003fe706 	br	8894 <_gp+0xffff7a90>
    88f8:	0109c83a 	sub	r4,zero,r4
    88fc:	01c00044 	movi	r7,1
    8900:	003fe306 	br	8890 <_gp+0xffff7a8c>
    8904:	00c00044 	movi	r3,1
    8908:	003fee06 	br	88c4 <_gp+0xffff7ac0>

0000890c <__modsi3>:
    890c:	20001716 	blt	r4,zero,896c <__modsi3+0x60>
    8910:	000f883a 	mov	r7,zero
    8914:	2005883a 	mov	r2,r4
    8918:	28001216 	blt	r5,zero,8964 <__modsi3+0x58>
    891c:	2900162e 	bgeu	r5,r4,8978 <__modsi3+0x6c>
    8920:	01800804 	movi	r6,32
    8924:	00c00044 	movi	r3,1
    8928:	00000106 	br	8930 <__modsi3+0x24>
    892c:	30000a26 	beq	r6,zero,8958 <__modsi3+0x4c>
    8930:	294b883a 	add	r5,r5,r5
    8934:	31bfffc4 	addi	r6,r6,-1
    8938:	18c7883a 	add	r3,r3,r3
    893c:	293ffb36 	bltu	r5,r4,892c <_gp+0xffff7b28>
    8940:	18000526 	beq	r3,zero,8958 <__modsi3+0x4c>
    8944:	1806d07a 	srli	r3,r3,1
    8948:	11400136 	bltu	r2,r5,8950 <__modsi3+0x44>
    894c:	1145c83a 	sub	r2,r2,r5
    8950:	280ad07a 	srli	r5,r5,1
    8954:	183ffb1e 	bne	r3,zero,8944 <_gp+0xffff7b40>
    8958:	38000126 	beq	r7,zero,8960 <__modsi3+0x54>
    895c:	0085c83a 	sub	r2,zero,r2
    8960:	f800283a 	ret
    8964:	014bc83a 	sub	r5,zero,r5
    8968:	003fec06 	br	891c <_gp+0xffff7b18>
    896c:	0109c83a 	sub	r4,zero,r4
    8970:	01c00044 	movi	r7,1
    8974:	003fe706 	br	8914 <_gp+0xffff7b10>
    8978:	00c00044 	movi	r3,1
    897c:	003ff106 	br	8944 <_gp+0xffff7b40>

00008980 <__udivsi3>:
    8980:	200d883a 	mov	r6,r4
    8984:	2900152e 	bgeu	r5,r4,89dc <__udivsi3+0x5c>
    8988:	28001416 	blt	r5,zero,89dc <__udivsi3+0x5c>
    898c:	00800804 	movi	r2,32
    8990:	00c00044 	movi	r3,1
    8994:	00000206 	br	89a0 <__udivsi3+0x20>
    8998:	10000e26 	beq	r2,zero,89d4 <__udivsi3+0x54>
    899c:	28000516 	blt	r5,zero,89b4 <__udivsi3+0x34>
    89a0:	294b883a 	add	r5,r5,r5
    89a4:	10bfffc4 	addi	r2,r2,-1
    89a8:	18c7883a 	add	r3,r3,r3
    89ac:	293ffa36 	bltu	r5,r4,8998 <_gp+0xffff7b94>
    89b0:	18000826 	beq	r3,zero,89d4 <__udivsi3+0x54>
    89b4:	0005883a 	mov	r2,zero
    89b8:	31400236 	bltu	r6,r5,89c4 <__udivsi3+0x44>
    89bc:	314dc83a 	sub	r6,r6,r5
    89c0:	10c4b03a 	or	r2,r2,r3
    89c4:	1806d07a 	srli	r3,r3,1
    89c8:	280ad07a 	srli	r5,r5,1
    89cc:	183ffa1e 	bne	r3,zero,89b8 <_gp+0xffff7bb4>
    89d0:	f800283a 	ret
    89d4:	0005883a 	mov	r2,zero
    89d8:	f800283a 	ret
    89dc:	00c00044 	movi	r3,1
    89e0:	003ff406 	br	89b4 <_gp+0xffff7bb0>

000089e4 <__umodsi3>:
    89e4:	2005883a 	mov	r2,r4
    89e8:	2900122e 	bgeu	r5,r4,8a34 <__umodsi3+0x50>
    89ec:	28001116 	blt	r5,zero,8a34 <__umodsi3+0x50>
    89f0:	01800804 	movi	r6,32
    89f4:	00c00044 	movi	r3,1
    89f8:	00000206 	br	8a04 <__umodsi3+0x20>
    89fc:	30000c26 	beq	r6,zero,8a30 <__umodsi3+0x4c>
    8a00:	28000516 	blt	r5,zero,8a18 <__umodsi3+0x34>
    8a04:	294b883a 	add	r5,r5,r5
    8a08:	31bfffc4 	addi	r6,r6,-1
    8a0c:	18c7883a 	add	r3,r3,r3
    8a10:	293ffa36 	bltu	r5,r4,89fc <_gp+0xffff7bf8>
    8a14:	18000626 	beq	r3,zero,8a30 <__umodsi3+0x4c>
    8a18:	1806d07a 	srli	r3,r3,1
    8a1c:	11400136 	bltu	r2,r5,8a24 <__umodsi3+0x40>
    8a20:	1145c83a 	sub	r2,r2,r5
    8a24:	280ad07a 	srli	r5,r5,1
    8a28:	183ffb1e 	bne	r3,zero,8a18 <_gp+0xffff7c14>
    8a2c:	f800283a 	ret
    8a30:	f800283a 	ret
    8a34:	00c00044 	movi	r3,1
    8a38:	003ff706 	br	8a18 <_gp+0xffff7c14>

00008a3c <__mulsi3>:
    8a3c:	0005883a 	mov	r2,zero
    8a40:	20000726 	beq	r4,zero,8a60 <__mulsi3+0x24>
    8a44:	20c0004c 	andi	r3,r4,1
    8a48:	2008d07a 	srli	r4,r4,1
    8a4c:	18000126 	beq	r3,zero,8a54 <__mulsi3+0x18>
    8a50:	1145883a 	add	r2,r2,r5
    8a54:	294b883a 	add	r5,r5,r5
    8a58:	203ffa1e 	bne	r4,zero,8a44 <_gp+0xffff7c40>
    8a5c:	f800283a 	ret
    8a60:	f800283a 	ret

00008a64 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8a64:	deffff04 	addi	sp,sp,-4
    8a68:	01000074 	movhi	r4,1
    8a6c:	01400074 	movhi	r5,1
    8a70:	dfc00015 	stw	ra,0(sp)
    8a74:	21234904 	addi	r4,r4,-29404
    8a78:	29638504 	addi	r5,r5,-29164

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8a7c:	2140061e 	bne	r4,r5,8a98 <alt_load+0x34>
    8a80:	01000074 	movhi	r4,1
    8a84:	01400074 	movhi	r5,1
    8a88:	21200804 	addi	r4,r4,-32736
    8a8c:	29600804 	addi	r5,r5,-32736
    8a90:	2140121e 	bne	r4,r5,8adc <alt_load+0x78>
    8a94:	00000b06 	br	8ac4 <alt_load+0x60>
    8a98:	00c00074 	movhi	r3,1
    8a9c:	18e38504 	addi	r3,r3,-29164
    8aa0:	1907c83a 	sub	r3,r3,r4
    8aa4:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8aa8:	10fff526 	beq	r2,r3,8a80 <_gp+0xffff7c7c>
    {
      *to++ = *from++;
    8aac:	114f883a 	add	r7,r2,r5
    8ab0:	39c00017 	ldw	r7,0(r7)
    8ab4:	110d883a 	add	r6,r2,r4
    8ab8:	10800104 	addi	r2,r2,4
    8abc:	31c00015 	stw	r7,0(r6)
    8ac0:	003ff906 	br	8aa8 <_gp+0xffff7ca4>
    8ac4:	01000074 	movhi	r4,1
    8ac8:	01400074 	movhi	r5,1
    8acc:	21233f04 	addi	r4,r4,-29444
    8ad0:	29633f04 	addi	r5,r5,-29444

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8ad4:	2140101e 	bne	r4,r5,8b18 <alt_load+0xb4>
    8ad8:	00000b06 	br	8b08 <alt_load+0xa4>
    8adc:	00c00074 	movhi	r3,1
    8ae0:	18e00804 	addi	r3,r3,-32736
    8ae4:	1907c83a 	sub	r3,r3,r4
    8ae8:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8aec:	10fff526 	beq	r2,r3,8ac4 <_gp+0xffff7cc0>
    {
      *to++ = *from++;
    8af0:	114f883a 	add	r7,r2,r5
    8af4:	39c00017 	ldw	r7,0(r7)
    8af8:	110d883a 	add	r6,r2,r4
    8afc:	10800104 	addi	r2,r2,4
    8b00:	31c00015 	stw	r7,0(r6)
    8b04:	003ff906 	br	8aec <_gp+0xffff7ce8>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8b08:	0008cec0 	call	8cec <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    8b0c:	dfc00017 	ldw	ra,0(sp)
    8b10:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    8b14:	0008cf01 	jmpi	8cf0 <alt_icache_flush_all>
    8b18:	00c00074 	movhi	r3,1
    8b1c:	18e34904 	addi	r3,r3,-29404
    8b20:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8b24:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8b28:	18bff726 	beq	r3,r2,8b08 <_gp+0xffff7d04>
    {
      *to++ = *from++;
    8b2c:	114f883a 	add	r7,r2,r5
    8b30:	39c00017 	ldw	r7,0(r7)
    8b34:	110d883a 	add	r6,r2,r4
    8b38:	10800104 	addi	r2,r2,4
    8b3c:	31c00015 	stw	r7,0(r6)
    8b40:	003ff906 	br	8b28 <_gp+0xffff7d24>

00008b44 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8b44:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8b48:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8b4c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8b50:	0008c0c0 	call	8c0c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8b54:	0008c2c0 	call	8c2c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8b58:	d1a04217 	ldw	r6,-32504(gp)
    8b5c:	d1604317 	ldw	r5,-32500(gp)
    8b60:	d1204417 	ldw	r4,-32496(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8b64:	dfc00017 	ldw	ra,0(sp)
    8b68:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8b6c:	000805c1 	jmpi	805c <main>

00008b70 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    8b70:	defffe04 	addi	sp,sp,-8
    8b74:	dc000015 	stw	r16,0(sp)
    8b78:	dfc00115 	stw	ra,4(sp)
    8b7c:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8b80:	00088140 	call	8814 <strlen>
    8b84:	01000074 	movhi	r4,1
    8b88:	000f883a 	mov	r7,zero
    8b8c:	100d883a 	mov	r6,r2
    8b90:	800b883a 	mov	r5,r16
    8b94:	21238304 	addi	r4,r4,-29172
#else
    return fputs(str, stdout);
#endif
#endif
}
    8b98:	dfc00117 	ldw	ra,4(sp)
    8b9c:	dc000017 	ldw	r16,0(sp)
    8ba0:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8ba4:	0008c301 	jmpi	8c30 <altera_avalon_jtag_uart_write>

00008ba8 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    8ba8:	0008c641 	jmpi	8c64 <alt_busy_sleep>

00008bac <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    8bac:	00800044 	movi	r2,1
    8bb0:	20800226 	beq	r4,r2,8bbc <write+0x10>
    8bb4:	00800084 	movi	r2,2
    8bb8:	2080041e 	bne	r4,r2,8bcc <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    8bbc:	01000074 	movhi	r4,1
    8bc0:	000f883a 	mov	r7,zero
    8bc4:	21238304 	addi	r4,r4,-29172
    8bc8:	0008c301 	jmpi	8c30 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    8bcc:	d0a00317 	ldw	r2,-32756(gp)
    8bd0:	10000926 	beq	r2,zero,8bf8 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    8bd4:	deffff04 	addi	sp,sp,-4
    8bd8:	dfc00015 	stw	ra,0(sp)
    8bdc:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    8be0:	00c01444 	movi	r3,81
    8be4:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    8be8:	00bfffc4 	movi	r2,-1
    8bec:	dfc00017 	ldw	ra,0(sp)
    8bf0:	dec00104 	addi	sp,sp,4
    8bf4:	f800283a 	ret
    8bf8:	d0a04104 	addi	r2,gp,-32508
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    8bfc:	00c01444 	movi	r3,81
    8c00:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    8c04:	00bfffc4 	movi	r2,-1
    8c08:	f800283a 	ret

00008c0c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8c0c:	deffff04 	addi	sp,sp,-4
    8c10:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, CPU);
    8c14:	0008cf40 	call	8cf4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8c18:	00800044 	movi	r2,1
    8c1c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8c20:	dfc00017 	ldw	ra,0(sp)
    8c24:	dec00104 	addi	sp,sp,4
    8c28:	f800283a 	ret

00008c2c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8c2c:	f800283a 	ret

00008c30 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    8c30:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    8c34:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    8c38:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8c3c:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    8c40:	2980072e 	bgeu	r5,r6,8c60 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8c44:	38c00037 	ldwio	r3,0(r7)
    8c48:	18ffffec 	andhi	r3,r3,65535
    8c4c:	183ffc26 	beq	r3,zero,8c40 <_gp+0xffff7e3c>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    8c50:	28c00007 	ldb	r3,0(r5)
    8c54:	20c00035 	stwio	r3,0(r4)
    8c58:	29400044 	addi	r5,r5,1
    8c5c:	003ff806 	br	8c40 <_gp+0xffff7e3c>

  return count;
}
    8c60:	f800283a 	ret

00008c64 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    8c64:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    8c68:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    8c6c:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    8c70:	dc000015 	stw	r16,0(sp)
    8c74:	dfc00115 	stw	ra,4(sp)
    8c78:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    8c7c:	00089800 	call	8980 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    8c80:	10001026 	beq	r2,zero,8cc4 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    8c84:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    8c88:	013999b4 	movhi	r4,58982
    8c8c:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    8c90:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    8c94:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    8c98:	297fffc4 	addi	r5,r5,-1
    8c9c:	283ffe1e 	bne	r5,zero,8c98 <_gp+0xffff7e94>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    8ca0:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    8ca4:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    8ca8:	18bffb16 	blt	r3,r2,8c98 <_gp+0xffff7e94>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    8cac:	01400144 	movi	r5,5
    8cb0:	8009883a 	mov	r4,r16
    8cb4:	0008a3c0 	call	8a3c <__mulsi3>
    8cb8:	10bfffc4 	addi	r2,r2,-1
    8cbc:	103ffe1e 	bne	r2,zero,8cb8 <_gp+0xffff7eb4>
    8cc0:	00000506 	br	8cd8 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    8cc4:	01400144 	movi	r5,5
    8cc8:	8009883a 	mov	r4,r16
    8ccc:	0008a3c0 	call	8a3c <__mulsi3>
    8cd0:	10bfffc4 	addi	r2,r2,-1
    8cd4:	00bffe16 	blt	zero,r2,8cd0 <_gp+0xffff7ecc>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    8cd8:	0005883a 	mov	r2,zero
    8cdc:	dfc00117 	ldw	ra,4(sp)
    8ce0:	dc000017 	ldw	r16,0(sp)
    8ce4:	dec00204 	addi	sp,sp,8
    8ce8:	f800283a 	ret

00008cec <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    8cec:	f800283a 	ret

00008cf0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    8cf0:	f800283a 	ret

00008cf4 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    8cf4:	000170fa 	wrctl	ienable,zero
    8cf8:	f800283a 	ret
